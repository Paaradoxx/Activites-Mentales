L=list(string.ascii_uppercase)
e=randint(0,25)
f=randint(0,25)
while e==f :
    e=randint(0,25)
    f=randint(0,25)
A=L[e]
B=L[f] 
p_1=randint(1,9)
p_2=randint(1,9)
p_3=randint(1,9)    
a = Fraction(p_1,10)
b = Fraction(p_2,10)
c = Fraction(p_3,10)
d=randint(0,5)
g=randint(0,3)
h=randint(0,1)
self.frame_init()
self.add("On étudie dans cette exercice deux évènements ",False)
self.add(A,False)
self.add(" et ",False)
self.add(B,False)
self.add(". On sait que : \n \n ",False)
if d==0 : 
    self.add("\\begin{itemize} \n \t \\item La probabilité d'avoir l'évènement ",False)
    self.add(A,False)
    self.add(" est ",False)
    self.add_nombre(a,False)
    self.add("\n \t \\item La probabilité d'avoir l'évènement ",False)
    self.add(B,False)
    self.add(" sachant qu'on a l'évènement ",False)
    self.add(A,False)
    self.add(" est ",False)
    self.add_nombre(b,False)
    self.add(" \n \t \\item La probabilité d'avoir l'évènement ",False)
    self.add(B,False)
    self.add(" sachant que l'évènement ",False)
    self.add(A,False)
    self.add(" n'a pas eu lieu est ",False)
    self.add_nombre(c,False)
elif d==1 :
    self.add("\\begin{itemize} \n \t \\item La probabilité de ne pas avoir l'évènement ",False)
    self.add(A,False)
    self.add(" est ",False)
    self.add_nombre(1-a,False)
    self.add("\n \t  \\item La probabilité d'avoir l'évènement ",False)
    self.add(B,False)
    self.add(" sachant qu'on a l'évènement ",False)
    self.add(A,False)
    self.add(" est ",False)
    self.add_nombre(b,False)
    self.add("\n \t  \\item La probabilité d'avoir l'évènement ",False)
    self.add(B,False)
    self.add(" sachant que l'évènement ",False)
    self.add(A,False)
    self.add(" n'a pas eu lieu est ",False)
    self.add_nombre(c,False)
elif d==2 :
    self.add("\\begin{itemize} \n \t \\item La probabilité de ne pas avoir l'évènement ",False)
    self.add(A,False)
    self.add(" est ",False)
    self.add_nombre(1-a,False)
    self.add("\n \t  \\item La probabilité de ne pas avoir l'évènement ",False)
    self.add(B,False)
    self.add(" sachant qu'on a l'évènement ",False)
    self.add(A,False)
    self.add(" est ",False)
    self.add_nombre(1-b,False)
    self.add(" \n \t \\item La probabilité d'avoir l'évènement ",False)
    self.add(B,False)
    self.add(" sachant que l'évènement ",False)
    self.add(A,False)
    self.add(" n'a pas eu lieu est ",False)
    self.add_nombre(c,False)
if d==3 : 
    self.add("\\begin{itemize} \n \t \\item La probabilité d'avoir l'évènement ",False)
    self.add(A,False)
    self.add(" est ",False)
    self.add_nombre(a,False)
    self.add(" \n \t \\item La probabilité de ne pas avoir l'évènement ",False)
    self.add(B,False)
    self.add(" sachant qu'on a l'évènement ",False)
    self.add(A,False)
    self.add(" est ",False)
    self.add_nombre(1-b,False)
    self.add("\n \t  \\item La probabilité de ne pas avoir l'évènement ",False)
    self.add(B,False)
    self.add(" sachant que l'évènement ",False)
    self.add(A,False)
    self.add(" n'a pas eu lieu est ",False)
    self.add_nombre(1-c,False)
if d==4 : 
    self.add("\\begin{itemize} \n \t \\item La probabilité de ne pas avoir l'évènement ",False)
    self.add(A,False)
    self.add(" est ",False)
    self.add_nombre(1-a,False)
    self.add(" \n \t \\item La probabilité de ne pas avoir l'évènement ",False)
    self.add(B,False)
    self.add(" sachant qu'on a l'évènement ",False)
    self.add(A,False)
    self.add(" est ",False)
    self.add_nombre(1-b,False)
    self.add(" \n \t \\item La probabilité de ne pas avoir l'évènement ",False)
    self.add(B,False)
    self.add(" sachant que l'évènement ",False)
    self.add(A,False)
    self.add(" n'a pas eu lieu est ",False)
    self.add_nombre(1-c,False)
if d==5 : 
    self.add("\\begin{itemize} \n \t \\item La probabilité d'avoir l'évènement ",False)
    self.add(A,False)
    self.add(" est ",False)
    self.add_nombre(a,False)
    self.add(" \n \t \\item La probabilité d'avoir l'évènement ",False)
    self.add(B,False)
    self.add(" sachant qu'on a l'évènement ",False)
    self.add(A,False)
    self.add(" est ",False)
    self.add_nombre(b,False)
    self.add(" \n \t \\item La probabilité de ne pas avoir l'évènement ",False)
    self.add(B,False)
    self.add(" sachant que l'évènement ",False)
    self.add(A,False)
    self.add(" n'a pas eu lieu est ",False)
    self.add_nombre(1-c,False)
self.add("\n \\end{itemize} \n \n \\begin{enumerate} \n \t \\item Construire un arbre pondéré de la situation. \n \t \\item ",False)
if g==0 : 
    self.add("Calculer $\\Prem(",False)
    self.add(A,False)
    self.add("\\cap ",False)
    self.add(B,False)
    self.add(")$",False)
elif g==1 : 
    self.add("Calculer $\\Prem(",False)
    self.add(A,False)
    self.add("\\cap \\overline{",False)
    self.add(B,False)
    self.add("})$",False)
elif g==2 : 
    self.add("Calculer $\\Prem(\\overline{",False)
    self.add(A,False)
    self.add("} \\cap \\overline{",False)
    self.add(B,False)
    self.add("})$",False)
elif g==3 : 
    self.add("Calculer $\\Prem(\\overline{",False)
    self.add(A,False)
    self.add("} \\cap ",False)
    self.add(B,False)
    self.add(")$",False)
self.add("\n \t \\item ",False)
if h==0:
    self.add("Donner la probabilité d'avoir l'évènement ",False)
    self.add(B,False)
    self.add(". \n \\item Calculer $\\Prem_{",False)
    self.add(B,False)
    self.add("}(",False)
    self.add(A,False)
    self.add(")$.",False)
else :
    self.add("Donner la probabilité de ne pas avoir l'évènement ",False)
    self.add(B,False)
    self.add(". \n \\item Calculer $\\Prem_{\\overline{",False)
    self.add(B,False)
    self.add("}}(",False)
    self.add(A,False)
    self.add(")$.",False)
self.add(" \n \\end{enumerate} ",False)


self.add("\\tikzstyle{level 1}=[level distance=4cm, sibling distance=2cm] \n \\tikzstyle{level 2}=[level distance=4cm, sibling distance=1.5cm] \n \\tikzstyle{bag} = [text width=3em, text centered] \n \n \\begin{enumerate} \\item ~ \n \n \t \\begin{tikzpicture}[grow=right, sloped] \n \t \\node[bag]{} \n \t child{ \n \t \t node[bag]{$\overline{")
self.add(A)
self.add("}$} \n \t \t child { \n \t \t \t  node[ label=right: \n \t \t \t \t {$\overline{")
self.add(B)
self.add("}$}] {} \n \t \t \t  edge from parent \n \t \t \t node[above] {} \n \t \t \t node[below]  {$")
self.add_nombre(1-c)
self.add("$} \n \t \t \t } \n \t \t child { \n \t \t \t node[ label=right:\n \t \t \t {$")
self.add(B)
self.add("$}] {} \n \t \t \t edge from parent \n \t \t \t node[above] {$")
self.add_nombre(c)
self.add("$} \n \t \t \t node[below]  {} \n \t \t \t } \n \t \t \t edge from parent \n \t \t \t  node[below] {$")
self.add_nombre(1-a)
self.add("$} \n \t \t \t node[above]  {} \n \t } \n \t \t   child { \n \t \t \t node[bag] {$")
self.add(A)
self.add("$} \n \t \t \t child { \n \t \t \t \t node[ label=right: \n \t \t \t \t  {$\overline{")
self.add(B)
self.add("}$}] {} \n \t \t \t \t  edge from parent \n \t \t \t node[above] {}\n \t \t \t \t node[below]  {$")
self.add_nombre(1-b)
self.add("$} \n \t \t \t } \n \t \t \t child { \n \t \t \t node[ label=right: \n \t \t \t \t {$")
self.add(B)
self.add("$}] {} \n \t \t \t \t edge from parent \n \t \t \t \t node[above] {$")
self.add_nombre(b)
self.add("$} \n \t \t \t \t node[below]  {} \n \t \t \t } \n \t \t \t edge from parent \n \t \t \t node[above] {$")
self.add_nombre(a)
self.add("$} \n \t \t \t node[above]  {} \n \t }; \n \t \end{tikzpicture} \n \t \\item ")
if g==0 : 
    self.add("$\\Prem(")
    self.add(A)
    self.add("\\cap ")
    self.add(B)
    self.add(")=\\Prem(")
    self.add(A)
    self.add(") \\times \\Prem_{")
    self.add(A)
    self.add("}(")
    self.add(B)
    self.add(")= ")
    self.add_nombre(a)
    self.add("\\times ")
    self.add_nombre(b)
    self.add("= ")
    self.add_nombre(round(a*b,3))
    self.add("$")
elif g==1 : 
    self.add("Calculer $\\Prem(")
    self.add(A)
    self.add("\\cap \\overline{")
    self.add(B)
    self.add("})=\\Prem(")
    self.add(A)
    self.add(") \\times \\Prem_{")
    self.add(A)
    self.add("}(")
    self.add("\\overline{")
    self.add(B)
    self.add("})= ")
    self.add_nombre(a)
    self.add("\\times ")
    self.add_nombre(1-b)
    self.add("= ")
    self.add_nombre(round(a*(1-b),3))
    self.add("$")
elif g==2 : 
    self.add("$\\Prem(\\overline{")
    self.add(A)
    self.add("} \\cap \\overline{")
    self.add(B)
    self.add("})=\\Prem(\\overline{")
    self.add(A)
    self.add("}) \\times \\Prem_{\\overline{")
    self.add(A)
    self.add("}}(")
    self.add("\\overline{")
    self.add(B)
    self.add("})= ")
    self.add_nombre(1-a)
    self.add("\\times ")
    self.add_nombre(1-c)
    self.add("= ")
    self.add_nombre(round((1-a)*(1-b),3))
    self.add("$")
elif g==3 : 
    self.add("$\\Prem(\\overline{")
    self.add(A)
    self.add("} \\cap ")
    self.add(B)
    self.add(")=\\Prem(\\overline{")
    self.add(A)
    self.add("}) \\times \\Prem_{\\overline{")
    self.add(A)
    self.add("}}(")
    self.add(B)
    self.add(")= ")
    self.add_nombre(1-a)
    self.add("\\times ")
    self.add_nombre(c)
    self.add("= ")
    self.add_nombre(round((1-a)*b,3))
    self.add("$")
self.add("\\end{enumerate} \n \n \\end{frame} \n \n \\begin{frame}  \n \\begin{enumerate} \\setcounter{enumi}{2}  \n \t \\item ")
if h==0:
    self.add("On cherche $\\Prem(")
    self.add(B)
    self.add(")$. D'après la formule des probabilités totales car $")
    self.add(A)
    self.add("$ et $\overline{")
    self.add(A)
    self.add("}$ forment une partition de l'univers, on a \\begin{align*} \\Prem(")
    self.add(B)
    self.add(") &= \\Prem(")
    self.add(B)
    self.add(" \\cap ")
    self.add(A)
    self.add(") + \\Prem(")
    self.add(B)
    self.add(" \\cap \\overline{")
    self.add(A)
    self.add("}) \\\ \n &= ")
    self.add_nombre(b)
    self.add("\\times ")
    self.add_nombre(a)
    self.add("+ ")
    self.add_nombre(c)
    self.add("\\times ")
    self.add_nombre(1-a)
    self.add(" \\\ \n &= ")
    self.add_nombre(round(b*a+c*(1-a),3))
    self.add("\n \\end{align*}")
    
    self.add("\n  \n \\item $\\Prem_{")
    self.add(B)
    self.add("}(")
    self.add(A)
    self.add(")=\\dfrac{\\Prem(")
    self.add(A)
    self.add("\\cap ")
    self.add(B)
    self.add(")}{\\Prem(")
    self.add(B)
    self.add(")} \\simeq ")
    self.add_nombre(round(round(a*b,3)/round(b*a+c*(1-a),5),3))
    self.add("$.")
else :
    self.add("On cherche $\\Prem(\\overline{")
    self.add(B)
    self.add("})$. D'après la formule des probabilités totales car $")
    self.add(A)
    self.add("$ et $\overline{")
    self.add(A)
    self.add("}$ forment une partition de l'univers, on a \\begin{align*} \\Prem(\\overline{")
    self.add(B)
    self.add("}) &= \\Prem(\\overline{")
    self.add(B)
    self.add(" } \\cap ")
    self.add(A)
    self.add(") + \\Prem(\\overline{")
    self.add(B)
    self.add(" } \\cap \\overline{")
    self.add(A)
    self.add("}) \\\ \n &= ")
    self.add_nombre(1-b)
    self.add("\\times ")
    self.add_nombre(a)
    self.add("+ ")
    self.add_nombre(1-c)
    self.add("\\times ")
    self.add_nombre(1-a)
    self.add(" \\\ \n &= ")
    self.add_nombre(round((1-b)*a+(1-c)*(1-a),3))
    self.add("\n \\end{align*}")

    self.add("\n  \n \\item $\\Prem_{\\overline{")
    self.add(B)
    self.add("}}(")
    self.add(A)
    self.add(")=\\dfrac{\\Prem(")
    self.add(A)
    self.add("\\cap \\overline{")
    self.add(B)
    self.add("})}{\\Prem(\\overline{")
    self.add(B)
    self.add("})} \\simeq ")
    self.add_nombre(round(round(a*(1-b),3)/round((1-b)*a+(1-c)*(1-a),3),3))
    self.add("$.")

self.add("\n \\end{enumerate}")
self.frame_end()